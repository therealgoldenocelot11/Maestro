/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import { ThreeGraphics } from '@enable3d/three-graphics';
import { ExtendedMesh, ThreeGraphicsConfig } from '@enable3d/common/dist/types.js';
import { Scene3D } from './scene3d.js';
import * as Plugins from '@enable3d/three-graphics/dist/plugins/index.js';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { CSG } from '@enable3d/three-graphics/dist/csg/index.js';
import type { ExtendedGroup } from '@enable3d/ammo-physics';
/**
 * The phaser wrapper for ThreeGraphics, which is a separate module
 */
declare class Third extends ThreeGraphics {
    scene3D: Scene3D;
    isXrEnabled: boolean;
    composer: EffectComposer;
    load: Plugins.Loaders;
    lights: Plugins.Lights;
    transform: Plugins.Transform;
    heightMap: Plugins.HeightMap;
    webXR: Plugins.WebXR;
    misc: Plugins.Misc;
    cameras: Plugins.Cameras;
    csg: typeof CSG;
    private factories;
    private ws;
    private mixers;
    /**
     * Start Phaser3D
     * @param scene Add the current Phaser Scene
     * @param config Phaser3D Config
     */
    constructor(scene3D: Scene3D, config?: ThreeGraphicsConfig);
    /** Will be called before THREE.WebGLRenderer.render() */
    preRender(): void;
    /** Will be called after THREE.WebGLRenderer.render() */
    postRender(): void;
    /** Destroys a object and its body. */
    destroy(obj: ExtendedMesh | ExtendedGroup): void;
    warpSpeed(...features: Plugins.WarpedStartFeatures[]): Promise<Plugins.WarpSpeedOptions>;
    haveSomeFun(numberOfElements?: number): void;
    get animationMixers(): import("@enable3d/three-graphics/dist/plugins/mixers.js").GetMixers;
    get make(): {
        extrude: import("@enable3d/common/dist/types.js").ExtrudeObject;
        plane: import("@enable3d/common/dist/types.js").PlaneObject;
        box: import("@enable3d/common/dist/types.js").BoxObject;
        sphere: import("@enable3d/common/dist/types.js").SphereObject;
        capsule: import("@enable3d/common/dist/types.js").CapsuleObject;
        cylinder: import("@enable3d/common/dist/types.js").CylinderObject;
        cone: import("@enable3d/common/dist/types.js").ConeObject;
        torus: (torusConfig?: import("@enable3d/common/dist/types.js").TorusConfig, materialConfig?: import("@enable3d/common/dist/types.js").MaterialConfig) => ExtendedMesh;
    };
    get add(): {
        mesh: any;
        material: import("@enable3d/common/dist/types.js").AddMaterial;
        extrude: import("@enable3d/common/dist/types.js").ExtrudeObject;
        existing: any;
        plane: import("@enable3d/common/dist/types.js").PlaneObject;
        ground: import("@enable3d/common/dist/types.js").GroundObject;
        box: import("@enable3d/common/dist/types.js").BoxObject;
        sphere: import("@enable3d/common/dist/types.js").SphereObject;
        capsule: import("@enable3d/common/dist/types.js").CapsuleObject;
        cylinder: import("@enable3d/common/dist/types.js").CylinderObject;
        cone: import("@enable3d/common/dist/types.js").ConeObject;
        torus: (torusConfig?: import("@enable3d/common/dist/types.js").TorusConfig, materialConfig?: import("@enable3d/common/dist/types.js").MaterialConfig) => ExtendedMesh;
    };
}
export default Third;
//# sourceMappingURL=third.d.ts.map